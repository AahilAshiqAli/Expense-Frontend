/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as protectedRouteImport } from './pages/(protected)/route'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const SplatLazyImport = createFileRoute('/$')()
const protectedIndexLazyImport = createFileRoute('/(protected)/')()
const protectedTransactionsLazyImport = createFileRoute(
  '/(protected)/transactions',
)()
const protectedIncomeLazyImport = createFileRoute('/(protected)/income')()
const protectedBudgetLazyImport = createFileRoute('/(protected)/budget')()
const protectedAddLazyImport = createFileRoute('/(protected)/add')()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/login.lazy').then((d) => d.Route))

const SplatLazyRoute = SplatLazyImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/$.lazy').then((d) => d.Route))

const protectedRouteRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const protectedIndexLazyRoute = protectedIndexLazyImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => protectedRouteRoute,
  } as any)
  .lazy(() => import('./pages/(protected)/index.lazy').then((d) => d.Route))

const protectedTransactionsLazyRoute = protectedTransactionsLazyImport
  .update({
    id: '/transactions',
    path: '/transactions',
    getParentRoute: () => protectedRouteRoute,
  } as any)
  .lazy(() =>
    import('./pages/(protected)/transactions.lazy').then((d) => d.Route),
  )

const protectedIncomeLazyRoute = protectedIncomeLazyImport
  .update({
    id: '/income',
    path: '/income',
    getParentRoute: () => protectedRouteRoute,
  } as any)
  .lazy(() => import('./pages/(protected)/income.lazy').then((d) => d.Route))

const protectedBudgetLazyRoute = protectedBudgetLazyImport
  .update({
    id: '/budget',
    path: '/budget',
    getParentRoute: () => protectedRouteRoute,
  } as any)
  .lazy(() => import('./pages/(protected)/budget.lazy').then((d) => d.Route))

const protectedAddLazyRoute = protectedAddLazyImport
  .update({
    id: '/add',
    path: '/add',
    getParentRoute: () => protectedRouteRoute,
  } as any)
  .lazy(() => import('./pages/(protected)/add.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/add': {
      id: '/(protected)/add'
      path: '/add'
      fullPath: '/add'
      preLoaderRoute: typeof protectedAddLazyImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/budget': {
      id: '/(protected)/budget'
      path: '/budget'
      fullPath: '/budget'
      preLoaderRoute: typeof protectedBudgetLazyImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/income': {
      id: '/(protected)/income'
      path: '/income'
      fullPath: '/income'
      preLoaderRoute: typeof protectedIncomeLazyImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/transactions': {
      id: '/(protected)/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof protectedTransactionsLazyImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/': {
      id: '/(protected)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexLazyImport
      parentRoute: typeof protectedRouteImport
    }
  }
}

// Create and export the route tree

interface protectedRouteRouteChildren {
  protectedAddLazyRoute: typeof protectedAddLazyRoute
  protectedBudgetLazyRoute: typeof protectedBudgetLazyRoute
  protectedIncomeLazyRoute: typeof protectedIncomeLazyRoute
  protectedTransactionsLazyRoute: typeof protectedTransactionsLazyRoute
  protectedIndexLazyRoute: typeof protectedIndexLazyRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedAddLazyRoute: protectedAddLazyRoute,
  protectedBudgetLazyRoute: protectedBudgetLazyRoute,
  protectedIncomeLazyRoute: protectedIncomeLazyRoute,
  protectedTransactionsLazyRoute: protectedTransactionsLazyRoute,
  protectedIndexLazyRoute: protectedIndexLazyRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof protectedIndexLazyRoute
  '/$': typeof SplatLazyRoute
  '/login': typeof LoginLazyRoute
  '/add': typeof protectedAddLazyRoute
  '/budget': typeof protectedBudgetLazyRoute
  '/income': typeof protectedIncomeLazyRoute
  '/transactions': typeof protectedTransactionsLazyRoute
}

export interface FileRoutesByTo {
  '/$': typeof SplatLazyRoute
  '/login': typeof LoginLazyRoute
  '/add': typeof protectedAddLazyRoute
  '/budget': typeof protectedBudgetLazyRoute
  '/income': typeof protectedIncomeLazyRoute
  '/transactions': typeof protectedTransactionsLazyRoute
  '/': typeof protectedIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/$': typeof SplatLazyRoute
  '/login': typeof LoginLazyRoute
  '/(protected)/add': typeof protectedAddLazyRoute
  '/(protected)/budget': typeof protectedBudgetLazyRoute
  '/(protected)/income': typeof protectedIncomeLazyRoute
  '/(protected)/transactions': typeof protectedTransactionsLazyRoute
  '/(protected)/': typeof protectedIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/login'
    | '/add'
    | '/budget'
    | '/income'
    | '/transactions'
  fileRoutesByTo: FileRoutesByTo
  to: '/$' | '/login' | '/add' | '/budget' | '/income' | '/transactions' | '/'
  id:
    | '__root__'
    | '/(protected)'
    | '/$'
    | '/login'
    | '/(protected)/add'
    | '/(protected)/budget'
    | '/(protected)/income'
    | '/(protected)/transactions'
    | '/(protected)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  SplatLazyRoute: typeof SplatLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  protectedRouteRoute: protectedRouteRouteWithChildren,
  SplatLazyRoute: SplatLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(protected)",
        "/$",
        "/login"
      ]
    },
    "/(protected)": {
      "filePath": "(protected)/route.tsx",
      "children": [
        "/(protected)/add",
        "/(protected)/budget",
        "/(protected)/income",
        "/(protected)/transactions",
        "/(protected)/"
      ]
    },
    "/$": {
      "filePath": "$.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/(protected)/add": {
      "filePath": "(protected)/add.lazy.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/budget": {
      "filePath": "(protected)/budget.lazy.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/income": {
      "filePath": "(protected)/income.lazy.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/transactions": {
      "filePath": "(protected)/transactions.lazy.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/": {
      "filePath": "(protected)/index.lazy.tsx",
      "parent": "/(protected)"
    }
  }
}
ROUTE_MANIFEST_END */
